{"version":3,"sources":["../../../src/app/product/ProductService.js"],"names":["config","Environment","ProductService","find","q","result","User","findOne","loadExcel","then","rows","console","log"],"mappings":";;;;;;;AAAA;;AACA;;;;AAGA,MAAMA,MAAM,GAAGC,sBAAYD,MAA3B;;AAEA,MAAME,cAAN,CAAqB;AACT,QAAJC,IAAI,CAAEC,CAAF,EAAK;AACb,UAAMC,MAAM,GAAG,MAAMC,IAAI,CAACH,IAAL,CAAUC,CAAV,CAArB;AACA,WAAOC,MAAP;AACD;;AAEY,QAAPE,OAAO,CAAEH,CAAF,EAAK;AAChB,UAAMC,MAAM,GAAG,MAAMC,IAAI,CAACC,OAAL,CAAaH,CAAb,CAArB;AACA,WAAOC,MAAP;AACD;;AAEc,QAATG,SAAS,GAAI;AACjB,uBAAa,eAAb,EAA8BC,IAA9B,CAAoCC,IAAD,IAAU;AAC3CC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAD2C,CAE3C;AACA;AACD,KAJD;AAKD;;AAjBkB;;eAsBN,IAAIR,cAAJ,E","sourcesContent":["import Environment from '../../config/environments';\nimport readXlsxFile from 'read-excel-file/node'\n\n\nconst config = Environment.config;\n\nclass ProductService {\n  async find (q) {\n    const result = await User.find(q);\n    return result;\n  }\n\n  async findOne (q) {\n    const result = await User.findOne(q);\n    return result;\n  }\n\n  async loadExcel () {\n    readXlsxFile('/path/to/file').then((rows) => {\n      console.log(rows)\n      // `rows` is an array of rows\n      // each row being an array of cells.\n    })\n  }\n\n  \n}\n\nexport default new ProductService();\n"],"file":"ProductService.js"}