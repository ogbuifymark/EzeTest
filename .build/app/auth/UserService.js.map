{"version":3,"sources":["../../../src/app/auth/UserService.js"],"names":["config","Environment","UserService","find","q","result","User","findOne","create","user","passwordHash","createPasswordHash","password","save","generateJwt","isValidUser","userName","findQuery","$or","email","validatePassword","Error","secrect","JWT_TOKEN_SECRECT","jwt","sign","fullName","_id"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA,MAAMA,MAAM,GAAGC,sBAAYD,MAA3B;;AAEA,MAAME,WAAN,CAAkB;AACN,QAAJC,IAAI,CAAEC,CAAF,EAAK;AACb,UAAMC,MAAM,GAAG,MAAMC,mBAAKH,IAAL,CAAUC,CAAV,CAArB;AACA,WAAOC,MAAP;AACD;;AAEY,QAAPE,OAAO,CAAEH,CAAF,EAAK;AAChB,UAAMC,MAAM,GAAG,MAAMC,mBAAKC,OAAL,CAAaH,CAAb,CAArB;AACA,WAAOC,MAAP;AACD;;AAEW,QAANG,MAAM,CAAEJ,CAAF,EAAK;AACf,QAAIK,IAAI,GAAG,IAAIH,kBAAJ,CAASF,CAAT,CAAX;AACAK,IAAAA,IAAI,CAACC,YAAL,GAAoBD,IAAI,CAACE,kBAAL,CAAwBP,CAAC,CAACQ,QAA1B,CAApB;AACA,SAAKH,IAAL,GAAY,MAAMA,IAAI,CAACI,IAAL,EAAlB;AACA,WAAO,KAAKC,WAAL,EAAP;AACD;;AAEgB,QAAXC,WAAW,CAAEX,CAAF,EAAK;AACpB,QAAI;AAAEY,MAAAA,QAAF;AAAYJ,MAAAA;AAAZ,QAAyBR,CAA7B;AACA,QAAIa,SAAS,GAAG;AAAEC,MAAAA,GAAG,EAAE,CAAC;AAAEF,QAAAA,QAAQ,EAAEA;AAAZ,OAAD,EAAyB;AAAEG,QAAAA,KAAK,EAAEH;AAAT,OAAzB;AAAP,KAAhB;AACA,QAAIP,IAAI,GAAG,MAAM,KAAKF,OAAL,CAAaU,SAAb,CAAjB;;AACA,QAAIR,IAAI,IAAIA,IAAI,CAACW,gBAAL,CAAsBR,QAAtB,EAAgCH,IAAI,CAACC,YAArC,CAAZ,EAAgE;AAC9D,WAAKD,IAAL,GAAYA,IAAZ;AACA,aAAO,KAAKK,WAAL,EAAP;AACD,KAHD,MAGO;AACL,YAAM,IAAIO,KAAJ,CAAU,gBAAV,CAAN;AACD;AACF;;AAEDP,EAAAA,WAAW,GAAI;AACb,QAAIQ,OAAO,GAAGtB,MAAM,CAACuB,iBAArB;AACA,WAAOC,sBAAIC,IAAJ,CACL;AACEN,MAAAA,KAAK,EAAE,KAAKV,IAAL,CAAUU,KADnB;AAEEO,MAAAA,QAAQ,EAAE,KAAKjB,IAAL,CAAUiB,QAFtB;AAGEC,MAAAA,GAAG,EAAE,KAAKlB,IAAL,CAAUkB;AAHjB,KADK,EAKFL,OALE,CAAP;AAMD;;AAtCe;;eAyCH,IAAIpB,WAAJ,E","sourcesContent":["import User from './UserModel';\nimport jwt from 'jsonwebtoken';\nimport Environment from '../../config/environments';\n\nconst config = Environment.config;\n\nclass UserService {\n  async find (q) {\n    const result = await User.find(q);\n    return result;\n  }\n\n  async findOne (q) {\n    const result = await User.findOne(q);\n    return result;\n  }\n\n  async create (q) {\n    let user = new User(q);\n    user.passwordHash = user.createPasswordHash(q.password);\n    this.user = await user.save();\n    return this.generateJwt();\n  }\n\n  async isValidUser (q) {\n    let { userName, password } = q;\n    let findQuery = { $or: [{ userName: userName }, { email: userName }] };\n    let user = await this.findOne(findQuery);\n    if (user && user.validatePassword(password, user.passwordHash)) {\n      this.user = user;\n      return this.generateJwt();\n    } else {\n      throw new Error('User Not Found');\n    }\n  }\n\n  generateJwt () {\n    let secrect = config.JWT_TOKEN_SECRECT;\n    return jwt.sign(\n      {\n        email: this.user.email,\n        fullName: this.user.fullName,\n        _id: this.user._id\n      }, secrect);\n  }\n}\n\nexport default new UserService();\n"],"file":"UserService.js"}