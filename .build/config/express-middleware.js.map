{"version":3,"sources":["../../src/config/express-middleware.js"],"names":["swaggerDocument","require","process","cwd","parser","Symbol","logger","router","validateToken","swagger","ExpressInstance","Express","constructor","config","exApp","errorHandler","use","bodyParser","urlencoded","extended","json","Logger","loggerMiddlerware","devLogger","isAuthGuard","express","Router","errorMsg","reason","req","res","next","token","headers","status","send","end","jwt","verify","JWT_TOKEN_SECRECT","err","decoded","Routes","every","route","Route","getUrl","url","gaurd","fullPath","swaggerUi","serve","setup","on","console","error","app"],"mappings":"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","sourcesContent":["import express from 'express';\nimport cookieParser from 'cookie-parser';\nimport bodyParser from 'body-parser';\nimport jwt from 'jsonwebtoken';\nimport Logger from './logger';\nimport Route from './route/route.index';\nimport Routes from './route/routes';\nimport swaggerUi from 'swagger-ui-express';\n\nconst swaggerDocument = require(process.cwd() + '/public/docs/swagger.json');\nconst parser = Symbol('parser');\nconst logger = Symbol('logger');\nconst router = Symbol('router');\nconst validateToken = Symbol('validateToken');\nconst swagger = Symbol('swagger');\nlet ExpressInstance = null;\n\nexport default class Express {\n  constructor (config) {\n    if (!ExpressInstance) {\n      this.exApp = express();\n      this[parser]();\n      this[logger]();\n      this[router]();\n      this[swagger]();\n      this.errorHandler();\n      this.config = config;\n      ExpressInstance = 'Express';\n    }\n  }\n\n  [parser] () {\n    this.exApp.use(cookieParser());\n    this.exApp.use(bodyParser.urlencoded({ extended: true }));\n    this.exApp.use(bodyParser.json());\n  }\n\n  [logger] () {\n    this.exApp.use(Logger.loggerMiddlerware);\n    this.exApp.use(Logger.devLogger);\n  }\n\n  [validateToken] (isAuthGuard = true) {\n    let router = express.Router();\n    let errorMsg = { reason: 'UnAuthorized Access' };\n    router.use((req, res, next) => {\n      if (isAuthGuard) {\n        let token = req.headers['x-access-token'];\n        if (!token) {\n          res.status(403).send(errorMsg).end();\n        } else {\n          jwt.verify(token, this.config.JWT_TOKEN_SECRECT, (err, decoded) => {\n            if (err) {\n              errorMsg.reason = err;\n              res.status(403).send(errorMsg);\n            } else {\n              next();\n            }\n          });\n        }\n      } else {\n        next();\n      }\n    });\n    return router;\n  }\n\n  [router] () {\n    const router = express.Router();\n    Routes.every((route) => {\n      router.use(Route.getUrl(route.url), this[validateToken](route.gaurd), route.route);\n      return true;\n    });\n    this.exApp.use(Route.fullPath(), router);\n  }\n\n  [swagger] () {\n    this.exApp.use('/', swaggerUi.serve, swaggerUi.setup(swaggerDocument, {}));\n  }\n\n  errorHandler () {\n    process.on('uncaughtException', (err) => {\n      console.error('whoops! There was an uncaught error', err);\n      // do a graceful shutdown,\n      // close the database connection etc.\n      // process.exit(1);\n    });\n  }\n\n  get app () {\n    return this.exApp;\n  }\n}\n"],"file":"express-middleware.js"}